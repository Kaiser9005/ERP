name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: 'pip'
        
    - name: Installation des dépendances
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Tests unitaires
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        VITE_WEATHER_API_KEY: ${{ secrets.VITE_WEATHER_API_KEY }}
        ML_MODEL_PATH: ./models/ml
        ANALYTICS_DATA_PATH: ./data/analytics
        IOT_SENSOR_CONFIG: ./config/iot_sensors.json
      run: |
        pytest tests/ --cov=. --cov-report=xml --ignore=tests/integration --ignore=tests/e2e --ignore=tests/ml --ignore=tests/inventory_ml --ignore=tests/projects_ml

    - name: Tests d'intégration
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        ML_MODEL_PATH: ./models/ml
        ANALYTICS_DATA_PATH: ./data/analytics
        IOT_SENSOR_CONFIG: ./config/iot_sensors.json
      run: |
        pytest tests/integration/ --cov=. --cov-report=xml --cov-append

    - name: Tests ML
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        ML_MODEL_PATH: ./models/ml
        ANALYTICS_DATA_PATH: ./data/analytics
      run: |
        pytest tests/ml/ tests/inventory_ml/ tests/projects_ml/ --cov=. --cov-report=xml --cov-append

    - name: Tests E2E
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        VITE_WEATHER_API_KEY: ${{ vars.VITE_WEATHER_API_KEY }}
        ML_MODEL_PATH: ./models/ml
        ANALYTICS_DATA_PATH: ./data/analytics
        IOT_SENSOR_CONFIG: ./config/iot_sensors.json
        OPENWEATHER_API_KEY: ${{ vars.OPENWEATHER_API_KEY }}
        IOT_API_KEY: ${{ vars.IOT_API_KEY }}
      run: |
        # Installation de Playwright
        pip install playwright
        playwright install
        
        # Démarrage du backend
        python main.py &
        sleep 10
        
        # Démarrage du frontend
        cd frontend
        npm run build
        npm run preview &
        sleep 5
        
        # Exécution des tests e2e avec notre script personnalisé
        python scripts/run_e2e_tests.py --headless
        
        # Exécution des tests e2e avec pytest pour la couverture
        cd ..
        pytest tests/e2e/ --cov=. --cov-report=xml --cov-append

    - name: Upload coverage
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: 'pip'
        
    - name: Installation des linters
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
        
    - name: Linting
      run: |
        flake8 .
        black . --check
        isort . --check-only
        mypy .

  test-frontend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Installation des dépendances
      working-directory: ./frontend
      run: npm ci
        
    - name: Configuration environnement
      working-directory: ./frontend
      run: |
        echo "VITE_WEATHER_API_KEY=${{ secrets.VITE_WEATHER_API_KEY }}" >> .env
        echo "VITE_WEATHER_LOCATION=Ebondi,Cameroon" >> .env
        echo "VITE_API_URL=http://localhost:8000" >> .env
        echo "VITE_IOT_WEBSOCKET_URL=ws://localhost:8000/ws" >> .env
        echo "VITE_ANALYTICS_REFRESH_INTERVAL=300000" >> .env
        
    - name: Vérification types
      working-directory: ./frontend
      run: npm run type-check
        
    - name: Tests unitaires React
      working-directory: ./frontend
      env:
        VITE_WEATHER_API_KEY: ${{ secrets.VITE_WEATHER_API_KEY }}
      run: npm test -- --config ./vitest.config.ts

    - name: Tests d'intégration frontend
      working-directory: ./frontend
      env:
        VITE_WEATHER_API_KEY: ${{ secrets.VITE_WEATHER_API_KEY }}
      run: npm run test:integration

    - name: Tests de performance frontend
      working-directory: ./frontend
      env:
        VITE_WEATHER_API_KEY: ${{ secrets.VITE_WEATHER_API_KEY }}
      run: npm run test:perf

    - name: Tests de benchmark
      working-directory: ./frontend
      env:
        VITE_WEATHER_API_KEY: ${{ secrets.VITE_WEATHER_API_KEY }}
      run: npm run bench:ci

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

    - name: Upload coverage frontend
      uses: codecov/codecov-action@v4
      with:
        file: ./frontend/coverage/coverage-final.json
        flags: frontend
        fail_ci_if_error: true

  deploy-staging:
    needs: [test-backend, test-frontend]
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref == 'refs/heads/develop' && 'development' || 'staging' }}
      url: ${{ github.ref == 'refs/heads/develop' && 'https://dev.erp-agricole.com' || 'https://staging.erp-agricole.com' }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-3
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Build and push backend image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/erp-backend:staging-$IMAGE_TAG .
        docker push $ECR_REGISTRY/erp-backend:staging-$IMAGE_TAG
    
    - name: Build and push frontend image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd frontend
        docker build -t $ECR_REGISTRY/erp-frontend:staging-$IMAGE_TAG .
        docker push $ECR_REGISTRY/erp-frontend:staging-$IMAGE_TAG
    
    - name: Update ECS services
      run: |
        aws ecs update-service --cluster erp-staging --service erp-backend --force-new-deployment
        aws ecs update-service --cluster erp-staging --service erp-frontend --force-new-deployment

  deploy-production:
    needs: [test-backend, test-frontend]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://erp-agricole.com
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-3
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Build and push backend image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/erp-backend:prod-$IMAGE_TAG .
        docker push $ECR_REGISTRY/erp-backend:prod-$IMAGE_TAG
    
    - name: Build and push frontend image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd frontend
        docker build -t $ECR_REGISTRY/erp-frontend:prod-$IMAGE_TAG .
        docker push $ECR_REGISTRY/erp-frontend:prod-$IMAGE_TAG
    
    - name: Update ECS services
      run: |
        aws ecs update-service --cluster erp-production --service erp-backend --force-new-deployment
        aws ecs update-service --cluster erp-production --service erp-frontend --force-new-deployment

    - name: Create Sentry release
      uses: getsentry/action-release@v1
      env:
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        SENTRY_ORG: erp-agricole
        SENTRY_PROJECT: erp
      with:
        environment: production
        version: ${{ github.sha }}
