name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7.2-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      mqtt:
        image: eclipse-mosquitto:2
        ports:
          - 1883:1883
        options: >-
          --health-cmd "timeout 5s mosquitto_sub -t test/mqtt -C 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Cache ML models
      uses: actions/cache@v3
      with:
        path: |
          models/ml
          .cache/torch
          ~/.cache/huggingface
        key: ${{ runner.os }}-ml-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-ml-
        
    - name: Installation des dépendances
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Tests unitaires
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        MQTT_BROKER: localhost
        MQTT_PORT: 1883
        ML_MODEL_PATH: ./models/ml
        WEATHER_API_KEY: ${{ secrets.WEATHER_API_KEY }}
      run: |
        pytest tests/ --cov=. --cov-report=xml --ignore=tests/integration --ignore=tests/e2e --ignore=tests/ml --ignore=tests/inventory_ml --ignore=tests/projects_ml -v

    - name: Tests d'intégration
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        MQTT_BROKER: localhost
        MQTT_PORT: 1883
        ML_MODEL_PATH: ./models/ml
      run: |
        pytest tests/integration/ --cov=. --cov-report=xml --cov-append -v

    - name: Tests ML
      timeout-minutes: 30
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        ML_MODEL_PATH: ./models/ml
        TORCH_CACHE_DIR: .cache/torch
      run: |
        pytest tests/ml/ tests/inventory_ml/ tests/projects_ml/ --cov=. --cov-report=xml --cov-append -v

    - name: Tests E2E
      timeout-minutes: 30
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        MQTT_BROKER: localhost
        MQTT_PORT: 1883
        WEATHER_API_KEY: ${{ secrets.WEATHER_API_KEY }}
        PLAYWRIGHT_BROWSERS_PATH: .playwright-cache
      run: |
        playwright install chromium
        pytest tests/e2e/ --cov=. --cov-report=xml --cov-append -v

    - name: Upload coverage
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Installation des linters
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
        
    - name: Linting
      run: |
        flake8 .
        black . --check
        isort . --check-only
        mypy . --strict

  test-frontend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'
        
    - name: Cache Playwright browsers
      uses: actions/cache@v3
      with:
        path: ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('frontend/package-lock.json') }}
        
    - name: Installation des dépendances
      working-directory: ./frontend
      run: |
        npm ci
        npx playwright install chromium
        
    - name: Configuration environnement
      working-directory: ./frontend
      run: |
        echo "VITE_WEATHER_API_KEY=${{ secrets.WEATHER_API_KEY }}" >> .env
        echo "VITE_API_URL=http://localhost:8000" >> .env
        echo "VITE_MQTT_BROKER=ws://localhost:1883" >> .env
        
    - name: Vérification types
      working-directory: ./frontend
      run: npm run type-check
        
    - name: Tests unitaires React
      working-directory: ./frontend
      run: npm test
      
    - name: Tests d'intégration frontend
      working-directory: ./frontend
      run: npm run test:integration
      
    - name: Tests de performance frontend
      working-directory: ./frontend
      run: npm run test:perf

    - name: Upload coverage frontend
      uses: codecov/codecov-action@v4
      with:
        file: ./frontend/coverage/coverage-final.json
        flags: frontend
        fail_ci_if_error: true

  build-frontend:
    needs: [test-frontend]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'
    
    - name: Build production
      working-directory: ./frontend
      run: |
        npm ci
        npm run build